#
# docs.serverless.com
# TODO(burdon): Serverless offline plugin.
# TODO(burdon): IAM roles for deploying lambda.
#

# TODO(burdon): Figure out (and remove us-east-2)

#
# Console:
# https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions?display=list
#

service: demo

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  webpack: "webpack.config.js"
  dev:
    webhook: "14E2FD50-F675-4ADA-B132-CEE9950D044A"

plugins:
  # Webpack
  # https://www.npmjs.com/package/serverless-webpack
  - "serverless-webpack"

provider:
  name: aws
  runtime: nodejs6.10

  region: us-east-1                                           # N. Virginia

  stage: dev

  #
  # Environment available
  #
  environment:
    ALIEN_WEBHOOK: ${self:custom.${self:provider.stage}.webhook}

#
# IAM Role for Lambda.
# Creates role on-the-fly and attaches to the function.
# (Normally in AWS this would be in the Cloud Formation config).
#

#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ] }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:                                            # Join-string function to create ARN.
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

    # TODO(burdon): Expose as API Gateway.
    # TODO(burdon): WARNING: "Could not list api-gateway event sources."
    # Provides endpoint.
    # POST - https://7u7jsipmfh.execute-api.us-east-1.amazonaws.com/dev/hello
    # curl -X POST https://7u7jsipmfh.execute-api.us-east-1.amazonaws.com/dev/hello
    events:
      - http:
          path: /hello
          method: POST

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
